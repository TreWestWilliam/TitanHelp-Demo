@page "/NTT"
@using Models;
@using Data;
@using BlazorCookieAuth.Controllers
@using System.Net.Http
@using System.Net.Http.Json;
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject TicketsContext _context;
@inject NavigationManager NavManager


<h3>NewTicket_Test</h3>

<EditForm Model="@testTicket" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="Title" @bind-Value="testTicket.Title" />
    <InputText id="Content" @bind-Value="testTicket.Content" />

    <button type="submit">Submit</button>
</EditForm>

@code {
    UserModel CurrentUser = new UserModel();
    private TicketVM testTicket = new TicketVM();
    private void HandleValidSubmit()
    {
        testTicket.TicketPriority = Priority.normal;

        Ticket ticket = new Ticket
        {
            Title = testTicket.Title,
            Content = testTicket.Content,
            TicketPriority = testTicket.TicketPriority,
            CreationDT = DateTime.Now,
            CreatorId = ScreenNameToUID(CurrentUser.UserName),
            IsOpen = true


        };

        _context.Tickets.Add(ticket);
        _context.SaveChanges();

        NavManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserFromCookie();
        await base.OnInitializedAsync();
    }

    private int ScreenNameToUID(string name)
    {
        foreach (User u in _context.Users)
        {
            if (u.ScreenName.Equals(name))
                return u.UserID;
        }
        return 0;
    }

    async Task GetUserFromCookie()
    {
        var authToken =
        HttpContextAccessor.HttpContext.Request.Cookies[".AspNetCore.Cookies"];
        if (authToken != null)
        {
            Http.DefaultRequestHeaders
            .Add("Cookie", ".AspNetCore.Cookies=" + authToken);
            // Call the server side controller
            var url = UriHelper.ToAbsoluteUri("/api/User/GetUser");
            var result = await Http.GetFromJsonAsync<UserModel>(url.ToString());
            // Update the result
            CurrentUser.UserName = result.UserName;
            CurrentUser.IsAuthenticated = result.IsAuthenticated;
        }
    }
}
